
A. Fill-in-the-Blank Questions
1.	In C programming, the programmer is responsible for allocating memory using malloc and freeing it using the function __________, which is crucial because C does not feature automatic __________.
2.	An Abstract Data Type (ADT) separates the __________ of the objects and operations from the representation and __________ of those operations.
3.	Arrays are collections of elements stored in __________ memory locations and allow for direct, constant-time access, which is represented by the asymptotic notation __________.
4.	The phase in the Software Development Life Cycle (SDLC) where requirements are translated into system architecture, features, and functions is called __________.
5.	A __________ stores the memory address of a variable or object and is essential for linking nodes in dynamic data structures like linked lists, trees, and graphs.

Ans:
1. free / memory
2.
3.
4.
5.Data Structure
________________________________________
B. Code Review Questions
1.	Code Review: Memory Management Review the following C code snippet designed to create and populate a dynamic array of integers. Identify the critical missing step in the code necessary to adhere to the principle of "Manage Your Own Resource from OS," and provide the correct function call needed.
2.	void process_data() {
3.	    int n = 100;
4.	    int *data_array;
5.	    // Allocate memory for 100 integers
6.	    data_array = (int *) malloc(n * sizeof(int));
7.	
8.	    if (data_array != NULL) {
9.	        for(int i = 0; i < n; i++) {
10.	            data_array[i] = i * 2;
11.	        }
12.	    }
13.	    // ... Further operations on data_array ...
14.	
15.	    // [Missing Step Here]
16.	}
Ans:
   #include<stdio.h>
   int main(){
    void process_data() {
	    int n = 100;
	    int *data_array;
	    // Allocate memory for 100 integers
	    data_array = (int *) malloc(n * sizeof(int));
	
	    if (data_array != NULL) {
	        for(int i = 0; i < n; i++) {
	            data_array[i] = i * 2;
	        }
	    }
     free (data_array);
     return 0;
    }
17.	Code Review: Data Structure Modeling A C struct is used to group multiple related variables into a single composite type. Explain why, when designing a Linked List node using a C struct, the programmer must include a pointer to the next element, rather than just including another instance of the same struct.
________________________________________
C. Time Complexity Analysis
1.	Array Access Complexity What is the Big-O time complexity for retrieving an element at a known index i (e.g., Retrieve(A, i)) in a one-dimensional static array $A$? Justify why this complexity is possible based on how arrays store data.
A:  The complexity is based on the time of these actions,the more data which you stored and the more time you spend on.
2.	Search Algorithm Comparison Compare the worst-case time complexity of performing a Linear Search versus a Binary Search on an array of size $N$. Why does the sorted nature of an array allow Binary Search to achieve a significantly better performance profile?
o	Linear Search (Unsorted Array): O(??)--->O(N*N);
o	Binary Search (Sorted Array):   O(??)--->O(log N);
3.	Array Modification Complexity Analyze the complexity of the following operation on a fully populated array of size N: Inserting a new data element at the beginning (index 0). Provide the Big-O notation and explain which specific internal array process dictates this complexity.
A:
Before you insert a new data into the array,the first step is to move each data behind,and you can put the new data inside the array[0],
the time complexity is O(N+1).

______________________________________
D. Short Answer Questions
1.	ADT vs. Data Type Define the difference between an Abstract Data Type (ADT) and a Data Type as defined within a programming language. Specifically mention what aspect an ADT focuses on (the interface) versus what a Data Type is tightly bound to (the implementation details).
2.	Algorithm Criteria According to the definition provided, list and briefly explain three of the five criteria that all algorithms must satisfy (e.g., Input, Output, Definiteness, Finiteness, Effectiveness).
*instruction: five conditions in the criteria
A:
  I/O:there must be input and output in this algorithm
  Definiteness:the algorithm is no longer stop if you don't set up a limition.
  Effectiveness:the algorithm satisifies efficient,convenient,clarity.
3.	Data Structure Operations The Core CRUD operations on data structures include Insert, Read, Update, and Delete. List four distinct Advanced or Status operations that are also supported by data structures, providing an example for each category (e.g., one status operation, one advanced operation).
4.	Data Structures Categories Identify the four categories used to classify Non-Linear Data Structures in the sources, and give a specific example for each category.

